package dev.lurcat.ppe.form.impl;

import dev.lurcat.ppe.PPE;
import dev.lurcat.ppe.form.AdminForm;
import dev.lurcat.ppe.shop.Commande;
import dev.lurcat.ppe.shop.Plugin;
import dev.lurcat.ppe.users.Client;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class ModifierForm extends JFrame {

    /**
     * Creates new form NewJPanel
     */

    private final Map<String, String> contents;
    private final int id;
    private final AdminForm jFrame;

    public ModifierForm(int id, Map<String, String> contents, AdminForm jFrame) {
        this.id = id;
        this.contents = contents;
        this.jFrame = jFrame;
        initComponents();
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */


    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {


        int total = contents.values().size();
        JPanel contentPanel = new JPanel();
        Border padding = BorderFactory.createEmptyBorder(10, 10, 10, 10);
        contentPanel.setBorder(padding);

        this.setContentPane(contentPanel);
        this.getContentPane().setLayout(new GridLayout( total + 1,2, 10, 10));

        for (Map.Entry<String, String> entry : contents.entrySet()) {
            JTextField text = new JTextField(entry.getValue());
            JLabel label = new JLabel(entry.getKey());

            text.setPreferredSize(new Dimension(100, 30));
            label.setPreferredSize(new Dimension(100, 30));

            this.add(label);
            this.add(text);
        }
        jButtonConfirmer = new JButton("Confirmer");
        jButtonAnnuler = new JButton("Annuler");

        jButtonConfirmer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editValue();
            }
        });
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close();
            }
        });

        this.add(jButtonConfirmer);
        this.add(jButtonAnnuler);

        pack();
        rainbow();
        setSize( 300, 100 + (total * 40));
        center();
    }

    public void center() {
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - this.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - this.getHeight()) / 2);
        this.setLocation(x, y);
    }

    public void rainbow() {
        new Thread(() -> {
            long offstes = 2000L;
            float fade= 1F;

            while (isEnabled()) {
                float hue = (float)(System.nanoTime() + offstes) / 1.0E10F % 1.0F;
                long color = Long.parseLong(Integer.toHexString(Integer.valueOf(Color.HSBtoRGB(hue, 0.05F, 1.0F)).intValue()),16);
                Color c = new Color((int)color);
                Color couleur = new Color(c.getRed() / 255.0F * fade, c.getGreen() / 255.0F * fade, c.getBlue() / 255.0F * fade, c.getAlpha() / 255.0F);
                getContentPane().setBackground(couleur);
                try {
                    Thread.sleep(16);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
        }).start();
    }

    private void jTextFieldLoginActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void editValue() {

        switch (jFrame.currentTitle) {
            case "Clients": {
                Client client = PPE.INSTANCE.getClientManager().getClient(id);
                List<JTextField> list = getAllText();
                client.setMail(list.get(0).getText());
                client.setNumber(Integer.parseInt(list.get(1).getText()));
                client.setName(list.get(2).getText());

                PPE.INSTANCE.getClientManager().editClient(client);
                break;
            }
            case "Commandes": {
                Commande commande = PPE.INSTANCE.getCommandeManager().getCommande(id);
                List<JTextField> list = getAllText();
                commande.setId_client(Integer.parseInt(list.get(0).getText()));
                commande.setId_agent(Integer.parseInt(list.get(1).getText()));

                PPE.INSTANCE.getCommandeManager().editCommand(commande);
                break;
            }
            case "Plugins": {
                Plugin plugin = PPE.INSTANCE.getPluginManager().getPlugin(id);
                List<JTextField> list = getAllText();

                plugin.setName(list.get(0).getText());
                plugin.setPrice(Float.parseFloat(list.get(1).getText()));
                plugin.setPopularity(Float.parseFloat(list.get(2).getText()));
                plugin.setStock(Integer.parseInt(list.get(3).getText()));

                PPE.INSTANCE.getPluginManager().editPlugin(plugin);
                break;
            }
        }
        new Thread(() -> jFrame.update()).start();
        close();
    }

    public List<JTextField> getAllText() {
        List<JTextField> compList = new ArrayList<>();
        for (Component component : getAllComponents(this)) {
            if (component instanceof JTextField) {
                compList.add(((JTextField)component));
            }
        }
        return compList;
    }

    public List<Component> getAllComponents(final Container c) {
        Component[] comps = c.getComponents();
        List<Component> compList = new ArrayList<Component>();
        for (Component comp : comps) {
            compList.add(comp);
            if (comp instanceof Container) {
                compList.addAll(getAllComponents((Container) comp));
            }
        }
        return compList;
    }

    private void close() {
        this.disable();
        this.setVisible(false);
    }

    private JButton jButtonConfirmer;
    private JButton jButtonAnnuler;
}
